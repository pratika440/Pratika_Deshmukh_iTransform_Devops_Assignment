Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
docker images --no-trunc

5. Create a container of your image 
docker run f0b8a9a54136

6. List all the running containers
docker ps

7. List all the running and stopped containers
docker ps -aq


8. Find out the "Full" containerId of the container and write it below.
docker ps --no-trunc

9. Find out how many image layers are used to build this image.
docker history nginx
10. Get the Apache Tomcat 7 server image from the docker hub.
Ans: docker pull tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
Ans : docker create tomcat:7

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
Ans:172.17.0.2

13. Which Port it is using?
Ans: localhost:8888

14. Try to access the Tomcat's home page from your machine/vm.
Ans : docker run -p 9090:8080 mywebapp

15. What is the disk size of Apache Tomcat image?
Ans :  67.63MiB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
Ans: docker exec ded8dc91ac6b env
JAVA_HOME=/usr/local/openjdk-8
CATALINA_HOME=/usr/local/tomcat


17. Find out which port is exposed for tomcat?
Ans: 8080

18. Run multiple conntainers of tomcat on different port and access it's home page.
Ans : docker run -it --rm -p 80:8888 tomcat:7.0.90
      docker run -it --rm -p 8080:8080 tomcat:7.0.90

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
Ans: docker pull ubuntu:20.04
     docker pull ubuntu:20.10

20. Run the container of ubuntu in attached mode.
Ans: docker run --name=ubuntu1 -d -it ubuntu:20.04
docker attach ubuntu1

21. Run the container of another ubuntu in detached mode.
Ans: docker run --name=ubuntu2 -d -it ubuntu:20.10

22. Check how many ubuntu containers are running and stopped
Ans: docker ps -a
There are 3 containers of ubuntu of which all are stopped
23. Is the tomcat container running? If no, start one.
Ans: Yes , it is running

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
Ans: docker logs 2b4a3b12e67c

25. Check if ubuntu container is running? If no, start one in attached mode to the terminal.
Ans: docker attach Mynginx

26. Login as root user in ubuntu container
Ans : whoami - shows root user

27. Create a file with any name in root directory
Ans: touch sample.txt

28. Install software of your choice in ubuntu container using "apt-get install"
Ans: to update: apt-get update
     to install : apt-get install

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
Ans: exit command

30. Check if the ubuntu container is running.
Ans: No , the container exited

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
Ans:docker run --name ubuntuu ubuntu:20.04
    docker start 

32. Login as a root user
Ans: docker attach ubuntuu

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
Ans:No , there is not previous file
   to exit from container :   exit
   to kill container start the container :   docker start ubuntuu
   to kill container :  docker kill ubuntuu

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
Ans: Yes
a)to start container : docker start ubuntu1
b)to attach container : docker attach ubuntu1
c)file and installed software are present

35. Create an Image out of the existing container.
Ans:docker commit Mynginx ubuntu_images

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
Ans:docker run -it ubuntu_images
ls
Yes. All files and softwares are visible

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
Ans : docker kill 2b4a3b12e67c

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
Ans: docker build -t mywebapp .
     docker run -p 9090:8080 mywebapp

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
docker images -a

2. -f
docker images -f --no-trunc

3. -q
docker images -q

write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-

write atleast 1 command using each option above and prove their concepts as described in the --help.

1. -a
docker ps -a [-a, --all This will show all containers (default shows just running)]

2. -f
docker ps -f "name=nginx" [-f, --filter This will filter out based on conditions]

3. -q
docker ps -q [-q, --quiet only displays container ID's]

4. -n
docker ps -n [-n, --last int This will show last created containers]

5. -l
docker ps -l [-l, --latest This will show latest created containers]

6. -s
docker ps -s [-s, --size It will Display total file sizes]



41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".

It consist of options that can be used with docker like image,volume,node,swarm.

Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
docker cp img:/var/home  [Copy files/folders between a container and the local filesystem]

2. create
docker create -it ubuntu bash [Create a new container]

3. export
docker export ubuntu1 > latest.tar [Export a container's filesystem as a tar archive]

4. history
docker history ubuntu [Show the history of an image]

5. info
docker info  [Display system-wide information]

6. login
docker login localhost:8080 [Log in to a Docker registry]

7. logout
docker logout localhost:8080 [Log out to a Docker registry]

8. rename
docker rename ubuntu1 myimg  [Rename a container]

9. save
docker save myimg [Save one or more images to a tar archive (streamed to STDOUT by default)]

10. stats
docker stats [Display a live stream of container(s) resource usage statistics]

11. top
docker top container [Display the running processes of a container]


42. Kill all running container in one liner command.
docker container kill $(docker ps -q)

43. Delete all images in one liner command.
docker rmi $(docker images -a -q)

44. Create a simple Dockerfile, build it and run it.
vim Dockerfile
docker build -t myimage
docker run -p 8800:8080 myimage


45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
1. USER
2. RUN
3. ENV
4. CMD
5. RUN
6. ENTRYPOINT
7. EXPOSE
8. VOLUME

FROM ubuntu
RUN apt-get update
RUN apt-get -y install apache2
ADD . /var/www/html
ENTRYPOINT apachectl -D FOREGROUND
ENV name DevOps Pratika
------------------------------------------------------
FROM is used to define base image, on which we will be building.
ADD - ADD<source><destination in container> -used to add files to the container being built.
RUN is used to add layers to the base image, by installing components. Each RUN statement adds new layer to the docker image.
CMD is used to run commands on the start of the container. These commands run only when there is no arguement specified while running the container.
ENTRYPOINT is used strictly run commands the moment the container initializes.
ENV is used to define environment variables in the container run-time.
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.

C:\Users\DELL>docker pull ubuntu
C:\Users\DELL>docker run -it --name myimage ubuntu
	root@a611eef449b5:/# apt-get update
	root@a611eef449b5:/# apt-get install curl
	root@a611eef449b5:/# which nginx
	root@a611eef449b5:/# apt-get install curl
	root@a611eef449b5:/# service nginx start
	root@a611eef449b5:/# exit
docker commmit mynginx pratika20/myimage
docker images
docker login docker push pratika20/myimage
	